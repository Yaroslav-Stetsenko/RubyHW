
puts '1. Дан целочисленный массив. 
Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
array = [1,2,3,4,5,6,7,8,9,10]
a = []
array.each_with_index do |e,i| a << e if i.even?
end
b =[]
array.each_with_index do |e,i| b<<e if i.odd?
end
puts a.join(' , ') + (' , ') + b.join(' , ')
puts '--------------'
puts '2. Дан целочисленный массив. 
Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
puts b.join(' , ') + (' , ') + a.join(' , ')
puts '--------------'
puts '3. Дан целочисленный массив. 
Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. 
Если таких элементов нет, то вывести [ ].'
array = [22,3,3,5,5,10,7,30,24,25]
puts array.index { |i| array[0] < i && i < array[-1] } || []
puts '--------------'
puts '4. Дан целочисленный массив. 
Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. 
Если таких элементов нет, то вывести [ ].'
array = [1,2,3,4,5,6,7,8,9,10]
z = []
array.index { |i| z << i if array[0] < i && i < array[-1] }
puts z.last
puts '--------------'
puts '5. Дан целочисленный массив. 
Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
array = [6,23,37,40,51,63,70,80,94,10]
   array.index(array.first)+1.upto(array.rindex(array.last)-1) do |i|
      case array[i] %2 == 0
       when true
        	array[i]+=array.first
      end
    end
puts array.join(' , ')
puts '--------------'
puts '6. Дан целочисленный массив. 
Преобразовать его, прибавив к четным числам последний элемент. 
Первый и последний элементы массива не изменять.'
array = [6,23,37,40,51,63,70,80,94,10]
   array.index(array.first)+1.upto(array.rindex(array.last)-1) do |i|
      case array[i] %2 == 0
       when true
        	array[i]+=array.last
      end
    end
puts array.join(' , ')
puts '--------------'
puts '7. Дан целочисленный массив. 
Преобразовать его, прибавив к нечетным числам последний элемент. 
Первый и последний элементы массива не изменять.'
array = [6,23,37,40,51,63,70,80,94,10]
   array.index(array.first)+1.upto(array.rindex(array.last)-1) do |i|
      case array[i] %2 == 0
       when false
        	array[i]+=array.last
      end
    end
puts array.join(' , ')
puts '--------------'
puts '8. Дан целочисленный массив. 
Преобразовать его, прибавив к нечетным числам первый элемент. 
Первый и последний элементы массива не изменять.'
array = [6,23,37,40,51,63,70,80,94,10]
   array.index(array.first)+1.upto(array.rindex(array.last)-1) do |i|
      case array[i] %2 == 0
       when false
        	array[i]+=array.first
      end
    end
puts array.join(' , ')
puts '--------------'
puts '9. Дан целочисленный массив. 
Заменить все положительные элементы на значение минимального.'
array = [6,23,37,40,51,63,70,80,94,10]
  min = array.min(1)
  array.each_with_index do |val,i|
    if array[i]>0
      array[i]=min
    end
  end
puts array.join(' , ')
puts '--------------'
puts '10. Дан целочисленный массив. 
Заменить все положительные элементы на значение максимального.'
array = [6,23,37,40,51,63,70,80,94,10]
  max = array.max(1)
  array.each_with_index do |val,i|
    if array[i]>0
      array[i]=max
    end
  end
puts array.join(' , ')
puts '--------------'
puts '11. Дан целочисленный массив. 
Заменить все отрицательные элементы на значение минимального.'
array = [6,23,37,-40,51,63,70,-80,94,-10]
  min = array.min(1)
  array.each_with_index do |val,i|
    if array[i]<0
      array[i]=min
    end
  end
puts array.join(' , ')
puts '--------------'
puts '12. Дан целочисленный массив. 
Заменить все отрицательные элементы на значение максимального.'
array = [6,23,37,-40,51,63,70,-80,94,10]
  max = array.max(1)
  array.each_with_index do |val,i|
    if array[i]<0
      array[i]=max
    end
  end
puts array.join(' , ')
puts '--------------'
puts '13. Дан целочисленный массив. 
Осуществить циклический сдвиг элементов массива влево на одну позицию.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.rotate(1).join(' , ')
puts '--------------'
puts '14. Дан целочисленный массив. 
Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.rotate(-1).join(' , ')
puts '--------------'
puts '15. Дан целочисленный массив. 
Проверить, образуют ли элементы арифметическую прогрессию. 
Если да, то вывести разность прогрессии, если нет - вывести nil.'
puts (' did not do the task ')
puts '--------------'
puts '16. Дан целочисленный массив. 
Найти количество его локальных максимумов.'
puts (' did not do the task ')
puts '--------------'
puts '17. Дан целочисленный массив. 
Найти количество его локальных максимумов.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts ( (1..array.size-2).to_a.select{ |i| (array[i] > array[i-1])&&(array[i] > array[i+1]) }.size )
puts '--------------'
puts '18. Дан целочисленный массив. 
Найти количество его локальных минимумов.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts ( (1..array.size-2).to_a.select{ |i| (array[i] < array[i-1])&&(array[i] < array[i+1]) }.size )
puts '--------------'
puts '19. Дан целочисленный массив. 
Найти максимальный из его локальных максимумов.'
array = [6,23,37,-40,51,63,70,-80,94,10]
z = (1..array.size-2).to_a.select{ |i| (array[i] > array[i-1])&&(array[i] > array[i+1]) }
puts z.max
puts '--------------'
puts '20. Дан целочисленный массив. Найти минимальный из его локальных минимумов.'
array = [6,23,37,-40,51,63,70,-80,94,10]
z = (1..array.size-2).to_a.select{ |i| (array[i] < array[i-1])&&(array[i] < array[i+1]) }
puts z.min
puts '--------------'
puts '21. Дан целочисленный массив. 
Определить количество участков, на которых его элементы монотонно возрастают.'
puts (' did not do the task ')
puts '--------------'
puts '22. Дан целочисленный массив. 
Определить количество участков, на которых его элементы монотонно убывают.'
puts (' did not do the task ')
puts '--------------'
puts '23. Дано вещественное число R и массив вещественных чисел. 
Найти элемент массива, который наиболее близок к данному числу.'
R,array = 13.0, [6.5, 23.4, 37.8, 40.6, 51.1, 63.6, 70.6, 80.1, 94.3, 10.6]
array = array.sort
b = array.select{ |i| i<R }
c = array.select{ |i| i>R }
d = b.max
e = c.min
if (R-d) > (e-R)
  puts e 
else
  puts d 
end
puts '--------------'
puts '24. Дано вещественное число R и массив вещественных чисел. 
Найти элемент массива, который наименее близок к данному числу.'
array = array.sort
b = array.select{ |i| i<R }
c = array.select{ |i| i>R }
d = b.max
e = c.min
if (R-d) < (e-R)
  puts e 
else
  puts d 
end
puts '--------------'
puts '25. Дан целочисленный массив. 
Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
puts (' did not do the task ')
puts '--------------'
puts '26. Дан целочисленный массив. 
Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
puts (' did not do the task ')
puts '--------------'
puts '27. Дан целочисленный массив. 
Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
puts (' did not do the task ')
puts '--------------'
puts '28. Дан целочисленный массив. 
Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
puts (' did not do the task ')
puts '--------------'
puts '29. Дан целочисленный массив. Упорядочить его по возрастанию.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array1 = array.sort.join(' , ')
puts '--------------'
puts '30. Дан целочисленный массив. Упорядочить его по убыванию.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array1 = array.sort.reverse.join(' , ')
puts '--------------'
puts '31. Дан целочисленный массив. 
Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют убывающую последовательность.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts (0...array.size).sort_by{ |i| array[i] }.reverse.join(' , ')
puts '--------------'
puts '32. Дан целочисленный массив. 
Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют возрастающую последовательность.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts (0...array.size).sort_by{ |i| array[i] }.join(' , ')
puts '--------------'
puts '33. Дан целочисленный массив. Найти индекс минимального элемента.'
array = [6,94,-80,-40,94,63,70,-80,94,10]
puts array.index(array.min)
puts '--------------'
puts '34. Дан целочисленный массив. Найти индекс максимального элемента.'
array = [6,94,-80,-40,94,63,70,-80,94,10]
puts array.index(array.max)
puts '--------------'
puts '35. Дан целочисленный массив. Найти индекс первого минимального элемента.'
array = [6,94,-80,-40,94,63,70,-80,94,10]
puts array.index(array.min)
puts '--------------'
puts '36. Дан целочисленный массив. Найти индекс первого максимального элемента.'
array = [6,94,-80,-40,94,63,70,-80,94,10]
puts array.index(array.max)
puts '--------------'
puts '37. Дан целочисленный массив. Найти индекс последнего минимального элемента.'
puts (' did not do the task ')
puts '--------------'
puts '38. Дан целочисленный массив. Найти индекс последнего максимального элемента.'
puts (' did not do the task ')
puts '--------------'
puts '39. Дан целочисленный массив. Найти количество минимальных элементов.'
puts (' did not do the task ')
puts '--------------'
puts '40. Дан целочисленный массив. Найти количество максимальных элементов.'
puts (' did not do the task ')
puts '--------------'
puts '41. Дан целочисленный массив. Найти минимальный четный элемент.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.select{ |i| i.even? }.min
puts '--------------'
puts '42. Дан целочисленный массив. Найти минимальный нечетный элемент.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.select{ |i| i.odd? }.min
puts '--------------'
puts '43. Дан целочисленный массив. Найти максимальный четный элемент.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.select{ |i| i.even? }.max
puts '--------------'
puts '44. Дан целочисленный массив. Найти максимальный нечетный элемент.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.select{ |i| i.odd? }.max
puts '--------------'
puts '45. Дан целочисленный массив. Найти минимальный положительный элемент.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.select{|i| i>=0}.min
puts '--------------'
puts '46. Дан целочисленный массив. Найти максимальный отрицательный элемент.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.select{|i| i<=0}.max
puts '--------------'
puts '47. Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.'
puts (' did not do the task ')
puts '--------------'
puts '48. Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'
puts (' did not do the task ')
puts '--------------'
puts '49. Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.index(array.min)
puts '--------------'
puts '50. Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.index(array.max)
puts '--------------'
puts '51. Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.reverse.index(array.max)
puts '--------------'
puts '52. Дан целочисленный массив. Найти количество элементов, расположенных после первого минимального.'
array = [6,23,37,-40,51,63,70,-80,94,10]
puts array.reverse.index(array.min)
puts '--------------'
puts '53. Дан целочисленный массив. Найти количество элементов, расположенных перед последним максимальным.'
puts (' did not do the task ')
puts '--------------'
puts '54. Дан целочисленный массив. Найти количество элементов, расположенных перед последним минимальным.'
puts (' did not do the task ')
puts '--------------'
puts '55. Дан целочисленный массив. Найти количество элементов, расположенных после последнего максимального.'
puts (' did not do the task ')
puts '--------------'
puts '56. Дан целочисленный массив. Найти количество элементов, расположенных после последнего минимального.'
puts (' did not do the task ')
puts '--------------'












































