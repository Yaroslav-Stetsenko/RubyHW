array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
p '1. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
p array.partition(&:even?).flatten
p '--------------'
p '2. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
p array.partition(&:odd?).flatten
p '--------------'
p '3. Дан целочисленный массив.
Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1].'
array = [22, 3, 3, 5, 5, 10, 7, 30, 24, 25]
p array.index { |i| array[0] < i && i < array[-1] } || []
p '--------------'
p '4. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. '
array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
z = []
array.index { |i| z << i if array[0] < i && i < array[-1] }
p z.last
p '--------------'
p '5. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
array = [6, 23, 37, 40, 51, 63, 70, 80, 94, 10]
p array.map { |e| e.even? && (e != array[0] && e != array[-1]) ? e + array.first : e }
p '--------------'
p '6. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.'
array = [6, 23, 37, 40, 51, 63, 70, 80, 94, 10]
p array.map { |e| e.even? && (e != array[0] && e != array[-1]) ? e + array.last : e }
p '--------------'
p '7. Преобразовать его, прибавив к нечетным числам последний элемент. Первый и последний элементы массива не изменять.'
array = [6, 23, 37, 40, 51, 63, 70, 80, 94, 10]
p array.map { |e| e.odd? && (e != array[0] && e != array[-1]) ? e + array.first : e }
p '--------------'
p '8. Преобразовать его, прибавив к нечетным числам первый элемент. Первый и последний элементы массива не изменять.'
array = [6, 23, 37, 40, 51, 63, 70, 80, 94, 10]
p array.map { |e| e.odd? && (e != array[0] && e != array[-1]) ? e + array.last : e }
p '--------------'
p '9. Заменить все положительные элементы на значение минимального.'
array = [6, 23, 37, 40, 51, 63, 70, 80, 94, 10]
min = array.min(1)
array.each_with_index do |_val, i|
  array[i] = min if (array[i]).positive?
end
p array.join(' , ')
p '--------------'
p '10. Заменить все положительные элементы на значение максимального.'
array = [6, 23, 37, 40, 51, 63, 70, 80, 94, 10]
max = array.max(1)
array.each_with_index do |_val, i|
  array[i] = max if (array[i]).positive?
end
p array.join(' , ')
p '--------------'
p '11. Заменить все отрицательные элементы на значение минимального.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, -10]
min = array.min
a = array.map { |e| e.negative? ? min : e }
p a.join(' , ')
p '--------------'
p '12. Заменить все отрицательные элементы на значение максимального.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
max = array.max(1)
array.each_with_index do |_val, i|
  array[i] = max if (array[i]).negative?
end
p array.join(' , ')
p '--------------'
p '13. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.rotate(1).join(' , ')
p '--------------'
p '14. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.rotate(-1).join(' , ')
p '--------------'
p '15. Проверить, образуют ли элементы арифметическую прогрессию.'
p(' did not do the task ')
p '--------------'
p '17. Найти количество его локальных максимумов.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p((1..array.size - 2).to_a.select { |i| (array[i] > array[i - 1]) && (array[i] > array[i + 1]) }.size)
p '--------------'
p '18. Найти количество его локальных минимумов.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p((1..array.size - 2).to_a.select { |i| (array[i] < array[i - 1]) && (array[i] < array[i + 1]) }.size)
p '--------------'
p '19. Найти максимальный из его локальных максимумов.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
z = (1..array.size - 2).to_a.select { |i| (array[i] > array[i - 1]) && (array[i] > array[i + 1]) }
p z.max
p '--------------'
p '20. Найти минимальный из его локальных минимумов.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
z = (1..array.size - 2).to_a.select { |i| (array[i] < array[i - 1]) && (array[i] < array[i + 1]) }
p z.min
p '--------------'
p '21. Определить количество участков, на которых его элементы монотонно возрастают.'
p(' did not do the task ')
p '--------------'
p '22. Определить количество участков, на которых его элементы монотонно убывают.'
p(' did not do the task ')
p '--------------'
p '23. Дано вещественное число R и массив вещественных чисел.'
R = 13.0
array = [6.5, 23.4, 37.8, 40.6, 51.1, 63.6, 70.6, 80.1, 94.3, 10.6]
array = array.sort
b = array.select { |i| i < R }
c = array.select { |i| i > R }
d = b.max
e = c.min
if (R - d) > (e - R)
  p e
else
  p d
end
p '--------------'
p '24. Дано вещественное число R и массив вещественных чисел.'
array = array.sort
b = array.select { |i| i < R }
c = array.select { |i| i > R }
d = b.max
e = c.min
if (R - d) < (e - R)
  p e
else
  p d
end
p '--------------'
p '25. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
p(' did not do the task ')
p '--------------'
p '26. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
p(' did not do the task ')
p '--------------'
p '27. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
p(' did not do the task ')
p '--------------'
p '28. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
p(' did not do the task ')
p '--------------'
p '29. Упорядочить его по возрастанию.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array = array.sort.join(' , ')
p '--------------'
p '30. Упорядочить его по убыванию.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array = array.sort.reverse.join(' , ')
p '--------------'
p '31. Вывести индексы массива в порядке, в котором элементы образуют убывающую последовательность.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p (0...array.size).sort_by { |i| array[i] }.reverse.join(' , ')
p '--------------'
p '32. Вывести индексы массива в порядке, в котором элементы образуют возрастающую последовательность.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p (0...array.size).sort_by { |i| array[i] }.join(' , ')
p '--------------'
p '33. Найти индекс минимального элемента.'
array = [6, 94, -80, -40, 94, 63, 70, -80, 94, 10]
p array.index(array.min)
p '--------------'
p '34. Найти индекс максимального элемента.'
array = [6, 94, -80, -40, 94, 63, 70, -80, 94, 10]
p array.index(array.max)
p '--------------'
p '35. Найти индекс первого минимального элемента.'
array = [6, 94, -80, -40, 94, 63, 70, -80, 94, 10]
p array.index(array.min)
p '--------------'
p '36. Найти индекс первого максимального элемента.'
array = [6, 94, -80, -40, 94, 63, 70, -80, 94, 10]
p array.index(array.max)
p '--------------'
p '37. Найти индекс последнего минимального элемента.'
p(' did not do the task ')
p '--------------'
p '38. Найти индекс последнего максимального элемента.'
p(' did not do the task ')
p '--------------'
p '39. Найти количество минимальных элементов.'
p array.select { |el| el == array.min }.size
p '--------------'
p '40. Найти количество максимальных элементов.'
p array.select { |el| el == array.max }.size
p '--------------'
p '41. Найти минимальный четный элемент.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.select(&:even?).min
p '--------------'
p '42. Найти минимальный нечетный элемент.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.select(&:odd?).min
p '--------------'
p '43. Найти максимальный четный элемент.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.select(&:even?).max
p '--------------'
p '44. Найти максимальный нечетный элемент.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.select(&:odd?).max
p '--------------'
p '45. Найти минимальный положительный элемент.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.select { |i| i >= 0 }.min
p '--------------'
p '46. Найти максимальный отрицательный элемент.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.select { |i| i <= 0 }.max
p '--------------'
p '47. Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.'
p(' did not do the task ')
p '--------------'
p '48. Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'
p(' did not do the task ')
p '--------------'
p '49. Найти количество элементов, расположенных перед первым минимальным.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.index(array.min)
p '--------------'
p '50. Найти количество элементов, расположенных перед первым максимальным.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.index(array.max)
p '--------------'
p '51. Найти количество элементов, расположенных после первого максимального.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.reverse.index(array.max)
p '--------------'
p '52. Найти количество элементов, расположенных после первого минимального.'
array = [6, 23, 37, -40, 51, 63, 70, -80, 94, 10]
p array.reverse.index(array.min)
p '--------------'
p '53. Найти количество элементов, расположенных перед последним максимальным.'
p(' did not do the task ')
p '--------------'
p '54. Найти количество элементов, расположенных перед последним минимальным.'
p(' did not do the task ')
p '--------------'
p '55. Найти количество элементов, расположенных после последнего максимального.'
p(' did not do the task ')
p '--------------'
p '56. Найти количество элементов, расположенных после последнего минимального.'
p(' did not do the task ')
p '--------------'
p '57. Найти индекс первого экстремального (то есть минимального или максимального) элемента.'
p(' did not do the task ')
p '--------------'
p '58. Найти индекс последнего экстремального (то есть минимального или максимального) элемента.'
p(' did not do the task ')
p '--------------'
p '59. Найти количество элементов, между первым и последним минимальным.'
array = [6, 23, 37, -40, -80, 63, 70, -80, 94, 10]
p(array.rindex(array.min) - array.index(array.min) - 1)
p '--------------'
p '60. Найти количество элементов, между первым и последним максимальным.'
array = [6, 23, 94, -40, -80, 63, 70, -80, 94, 10]
p(array.rindex(array.max) - array.index(array.max) - 1)
p '--------------'
p '61. Найти два наибольших элемента.'
array = [6, 23, 94, -40, -80, 63, 70, -80, 94, 10]
p array.sort.uniq.last 2
p '--------------'
p '62. Найти два наименьших элемента.'
array = [6, 23, 94, -40, -80, 63, 70, -80, 94, 10]
p array.sort.uniq.first 2
p '--------------'
p '63. Найти максимальное количество подряд идущих минимальных элементов.'
p(' did not do the task ')
p '--------------'
p '64. Найти максимальное количество подряд идущих минимальных элементов.'
p(' did not do the task ')
p '--------------'
p '65. Вывести вначале все его четные элементы, а затем - нечетные.'
array = [6, 23, 94, -40, -80, 63, 70, -80, 94, 10]
p array.partition(&:even?).flatten
p '--------------'
p '66. Вывести вначале все его нечетные элементы, а затем - четные.'
array = [6, 23, 94, -40, -80, 63, 70, -80, 94, 10]
p array.partition(&:odd?).flatten
p '--------------'
p '67. Проверить, чередуются ли в нем четные и нечетные числа.'
p(' did not do the task ')
p '--------------'
p '68. Проверить, чередуются ли в нем четные и нечетные числа.'
p(' did not do the task ')
p '--------------'
p '69. Дано вещественное число R и массив вещественных чисел.
Найти два элемента массива, сумма которых наиболее близка к данному числу.'
p(' did not do the task ')
p '--------------'
p '70. Дано вещественное число R и массив вещественных чисел.
Найти два элемента массива, сумма которых наименее близка к данному числу.'
p(' did not do the task ')
p '--------------'
p '71. Удалить все элементы, встречающиеся менее двух раз.'
array = [6, 23, 94, -40, 94, 23, 70, 23, 94, 23]
skip_elements = array.uniq.select do |value|
  array.count(value) <= 2
end
skip_elements.each do |value|
  array.delete(value)
end
p skip_elements
p '--------------'
p '72. Удалить все элементы, встречающиеся более двух раз.'
array = [6, 23, 94, -40, 94, 23, 70, 23, 94, 23]
skip_elements = array.uniq.select do |value|
  array.count(value) >= 2
end
skip_elements.each do |value|
  array.delete(value)
end
p skip_elements
p '--------------'
p '73. Удалить все элементы, встречающиеся ровно два раза.'
array = [6, 23, 94, -40, 94, 94, 70, 22, 94, 23]
skip_elements = array.uniq.select do |value|
  array.count(value) == 2
end
skip_elements.each do |value|
  array.delete(value)
end
p skip_elements
p '--------------'
p '74. Удалить все элементы, встречающиеся ровно три раза.'
array = [6, 23, 94, -40, 94, 94, 70, 22, 94, 23]
skip_elements = array.uniq.select do |value|
  array.count(value) == 3
end
skip_elements.each do |value|
  array.delete(value)
end
p skip_elements
p '--------------'
p '75. Найти среднее арифметическое модулей его элементов.'
array = [6, 23, 94, -40, 94, 94, 70, 22, 94, 23]
p array.inject(0) { |sum, i| sum + i.abs }.to_f / array.size
p '--------------'
